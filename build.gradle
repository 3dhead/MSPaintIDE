plugins {
    id 'application'
    id 'idea'
    id 'java'
    id 'maven'
    id "it.tellnet.sass" version "1.2"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id 'org.openjfx.javafxplugin' version '0.0.6'
}

group = 'com.uddernetworks.mspaint'
version = '2.2.0-SNAPSHOT'

description = "Programming in MS Paint"

sourceCompatibility = 12

tasks.withType(JavaCompile) {
//	options.encoding = 'UTF-8'
//    options.compilerArgs << '--add-exports=java.management/sun.management=ALL-UNNAMED'
//    options.compilerArgs << '--add-exports=java.desktop/sun.font=ALL-UNNAMED'
//    options.compilerArgs << '--enable-preview'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

sass {
    sassDir = 'src/main/resources'
    cssDir = 'src/main/resources'
}

mainClassName = 'com.uddernetworks.mspaint.main.JFXWorkaround'

jar {
    manifest {
        attributes("Main-Class": "com.uddernetworks.mspaint.main.JFXWorkaround")
//        attributes("SplashScreen-Image": "splash/splash-full.png")
    }
}

configurations {
    javafxCompile
}

dependencies {
    // TODO: Clean this monstrosity of shit
    compile group: 'com.intellij', name: 'forms_rt', version:'7.0.3'

    compile group: 'com.jfoenix', name: 'jfoenix', version: '9.0.8-J12'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.5'
    compile 'com.uddernetworks.newocr:NewOCR:2.0.0-SNAPSHOT'
    compile group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.10'
    compile 'org.ocpsoft.prettytime:prettytime:4.0.2.Final'
    compile group: 'net.java.dev.jna', name: 'jna', version: '5.2.0'
    compile 'commons-codec:commons-codec:1.11'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    javafxCompile "org.openjfx:javafx-base:12.0.1:win"
    javafxCompile "org.openjfx:javafx-graphics:12.0.1:win"
    javafxCompile "org.openjfx:javafx-controls:12.0.1:win"
    javafxCompile "org.openjfx:javafx-fxml:12.0.1:win"

    // Local dependency from https://github.com/MSPaintIDE/PaintAssistant
    compile ('com.uddernetworks.paintassist:PaintAssistant:1.0-SNAPSHOT') {
        exclude group: 'com.google.auto.value'
    }

    compile             "com.google.auto.value:auto-value-annotations:1.6.2"
    annotationProcessor "com.google.auto.value:auto-value:1.6.2"

    compile 'org.eclipse.lsp4j:org.eclipse.lsp4j:0.7.2'

    compile configurations.javafxCompile
}

run {
    environment.putAll([
            "PaintInjector": "${rootProject.projectDir}\\native",
            "NativePath": "${rootProject.projectDir}\\native",
    ])
//    jvmArgs("-splash:${file('src/main/resources/splash/splash-full.png').toPath()}".toString())
    jvmArgs("--illegal-access=deny")
    jvmArgs("--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED")
    jvmArgs("--add-opens", "java.base/java.io=ALL-UNNAMED")
    jvmArgs("--add-opens", "java.base/java.util=ALL-UNNAMED")
    jvmArgs("--enable-preview")
//    args = ['E:\\MS Paint IDE Demos\\MS Paint IDE Demo\\Test.txt']
}

task preLaunch << {
    println 'COMPILE'
    sassCompile.execute()
}

task replaceStuff << {
    println 'REPLACE'
    ant.replaceregexp(match: '@charset "UTF-8";', replace: '') {
        fileset(dir: 'src/main/resources', includes: 'style.css')
    }
}

preLaunch.finalizedBy replaceStuff

task copyDependencies(type: Copy) {
    from configurations.runtime - configurations.javafxCompile
    from jar
    into "${buildDir}/libraries"
}
