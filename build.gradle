buildscript {
    repositories {
        mavenCentral()
        maven {
            url "http://xbib.org/repository"
        }
    }
    dependencies {
        classpath 'org.xbib.gradle.plugin:gradle-plugin-jflex:1.1.0'
    }
}

plugins {
    id 'application'
    id 'idea'
    id 'java'
    id 'maven'
    id "it.tellnet.sass" version "1.2"
    id "com.github.johnrengelman.shadow" version "4.0.2"
    id 'org.openjfx.javafxplugin' version '0.0.6'
    id 'org.xbib.gradle.plugin.jflex' version '1.1.0'
}

group = 'com.uddernetworks.mspaint'
version = '3.0.0-SNAPSHOT'

description = "Programming in MS Paint"

sourceCompatibility = 11

tasks.withType(JavaCompile) {
	options.encoding = 'UTF-8'
    options.compilerArgs << '--add-exports=java.management/sun.management=ALL-UNNAMED'
}

repositories {
    mavenLocal()
    mavenCentral()
    maven {
        url 'https://oss.sonatype.org/content/repositories/snapshots/'
    }
}

sass {
    sassDir = 'src/main/resources'
    cssDir = 'src/main/resources'
}

mainClassName = 'com.uddernetworks.mspaint.main.JFXWorkaround'

jar {
    manifest {
        attributes("Main-Class": "com.uddernetworks.mspaint.main.JFXWorkaround")
        attributes("SplashScreen-Image": "splash/splash-full.png")
    }
}

configurations {
    javafxCompile
}

dependencies {
    compile group: 'com.intellij', name: 'forms_rt', version:'7.0.3'
//    compile(group: 'org.apache.tika', name: 'tika-parsers', version:'1.20') {
//        exclude(module: 'jhighlight')
//    }

    compile group: 'org.codelibs', name: 'jhighlight', version:'1.0.3'

    compile group: 'com.jfoenix', name: 'jfoenix', version:'9.0.8'
    compile group: 'com.google.code.gson', name: 'gson', version:'2.8.5'
    compile 'com.uddernetworks.newocr:NewOCR:2.0.0-SNAPSHOT'
    compile group: 'org.apache.xmlgraphics', name: 'batik-rasterizer', version: '1.10'
    compile 'org.ocpsoft.prettytime:prettytime:4.0.2.Final'
    compile group: 'net.java.dev.jna', name: 'jna', version: '5.2.0'
    compile 'commons-codec:commons-codec:1.11'
    compile group: 'org.apache.commons', name: 'commons-math3', version: '3.6.1'

    compile group: 'org.slf4j', name: 'slf4j-api', version: '1.7.25'
    compile group: 'org.slf4j', name: 'slf4j-log4j12', version: '1.7.25'

    javafxCompile "org.openjfx:javafx-base:11.0.2:win"
    javafxCompile "org.openjfx:javafx-graphics:11.0.2:win"
    javafxCompile "org.openjfx:javafx-controls:11.0.2:win"
    javafxCompile "org.openjfx:javafx-fxml:11.0.2:win"

    compile configurations.javafxCompile
}

run {
    environment.putAll([
            "PaintInjector": "${rootProject.projectDir}\\native",
            "NativePath": "${rootProject.projectDir}\\native",
    ])
    jvmArgs("-splash:${file('src/main/resources/splash/splash-full.png').toPath()}".toString());
    jvmArgs("--illegal-access=deny")
    jvmArgs("--add-opens", "java.base/jdk.internal.loader=ALL-UNNAMED")
}

task preLaunch << {
    println 'COMPILE'
    sassCompile.execute()
}

task replaceStuff << {
    println 'REPLACE'
    ant.replaceregexp(match: '@charset "UTF-8";', replace: '') {
        fileset(dir: 'src/main/resources', includes: 'style.css')
    }
}

preLaunch.finalizedBy replaceStuff

task copyDependencies(type: Copy) {
    from configurations.runtime - configurations.javafxCompile
    from jar
    into "${buildDir}/libraries"
}
