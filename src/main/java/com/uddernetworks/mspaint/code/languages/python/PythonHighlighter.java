/* The following code was generated by JFlex 1.6.1 */

/*
 * Copyright 2008 Ayman Al-Sairafi ayman.alsairafi@gmail.com
 * Modifications copyright (C) 2018 Adam Yarris
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License
 *       at http://www.apache.org/licenses/LICENSE-2.0
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

package com.uddernetworks.mspaint.code.languages.python;

import com.uwyn.jhighlight.highlighter.ExplicitStateHighlighter;

import java.io.IOException;
import java.io.Reader;


/**
 * This class is a scanner generated by
 * <a href="http://www.jflex.de/">JFlex</a> 1.6.1
 * from the specification file <tt>E:/MSPaintIDE/src/main/java/com/uddernetworks/mspaint/languages/python/python.flex</tt>
 */
public final class PythonHighlighter extends DefaultJFlexLexer implements ExplicitStateHighlighter {

  /** This character denotes the end of file */
  public static final int YYEOF = -1;

  /** initial size of the lookahead buffer */
  private static final int ZZ_BUFFERSIZE = 16384;

  /** lexical states */
  public static final int YYINITIAL = 0;
  public static final int STRING = 2;
  public static final int ML_STRING = 4;
  public static final int SQSTRING = 6;
  public static final int SQML_STRING = 8;

  /**
   * ZZ_LEXSTATE[l] is the state in the DFA for the lexical state l
   * ZZ_LEXSTATE[l+1] is the state in the DFA for the lexical state l
   *                  at the beginning of a line
   * l is of the form l = 2*k, k a non negative integer
   */
  private static final int ZZ_LEXSTATE[] = {
     0,  0,  1,  1,  2,  2,  2,  2,  2, 2
  };

  /**
   * Translates characters to character classes
   */
  private static final String ZZ_CMAP_PACKED =
    "\11\0\1\3\1\2\1\102\1\103\1\1\22\0\1\3\1\77\1\23"+
    "\1\4\1\101\1\72\1\72\1\24\1\62\1\63\1\70\1\22\1\75"+
    "\1\22\1\20\1\71\1\7\1\15\2\14\4\16\2\10\1\75\1\75"+
    "\1\73\1\76\1\74\1\101\1\75\4\13\1\21\1\17\2\5\1\55"+
    "\1\100\1\5\1\11\1\5\1\54\5\5\1\56\3\5\1\12\2\5"+
    "\1\66\1\25\1\67\1\72\1\6\1\75\1\26\1\35\1\37\1\30"+
    "\1\32\1\44\1\51\1\53\1\42\1\61\1\36\1\40\1\50\1\27"+
    "\1\41\1\46\1\5\1\33\1\31\1\34\1\43\1\57\1\52\1\45"+
    "\1\47\1\60\1\64\1\72\1\65\1\75\6\0\1\102\u1fa2\0\1\102"+
    "\1\102\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\uffff\0\udfe6\0";

  /**
   * Translates characters to character classes
   */
  private static final char [] ZZ_CMAP = zzUnpackCMap(ZZ_CMAP_PACKED);

  /**
   * Translates DFA states to action switch labels.
   */
  private static final int [] ZZ_ACTION = zzUnpackAction();

  private static final String ZZ_ACTION_PACKED_0 =
    "\3\0\3\1\1\2\1\3\1\1\2\4\1\3\1\5"+
    "\1\3\1\5\1\6\1\7\31\3\1\10\1\11\1\12"+
    "\1\13\1\14\1\15\5\5\1\1\1\16\1\17\2\20"+
    "\1\21\1\17\1\1\2\2\1\0\3\4\1\0\4\4"+
    "\1\0\2\3\2\0\1\3\1\22\40\3\1\22\3\3"+
    "\1\22\1\23\1\22\1\3\1\22\25\3\2\17\1\24"+
    "\2\17\2\0\4\4\1\0\2\3\1\25\1\26\2\3"+
    "\1\22\1\3\1\23\36\3\1\23\24\3\1\27\1\17"+
    "\2\0\2\4\10\3\1\22\27\3\2\0\2\4\11\3"+
    "\1\22\13\3\2\0\2\4\13\3\1\22\1\3\2\0"+
    "\2\4\6\3\1\23\2\4\3\3\2\4\1\3\2\4"+
    "\1\3\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\1\4\1\0\1\4\1\0\1\4\1\0\1\4\1\0"+
    "\5\4";

  private static int [] zzUnpackAction() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAction(ZZ_ACTION_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAction(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /**
   * Translates a state to a row index in the transition table
   */
  private static final int [] ZZ_ROWMAP = zzUnpackRowMap();

  private static final String ZZ_ROWMAP_PACKED_0 =
    "\0\0\0\104\0\210\0\314\0\u0110\0\u0154\0\u0198\0\u01dc"+
    "\0\u0220\0\u0264\0\u02a8\0\u02ec\0\u0330\0\u0374\0\u03b8\0\u03fc"+
    "\0\u0440\0\u0484\0\u04c8\0\u050c\0\u0550\0\u0594\0\u05d8\0\u061c"+
    "\0\u0660\0\u06a4\0\u06e8\0\u072c\0\u0770\0\u07b4\0\u07f8\0\u083c"+
    "\0\u0880\0\u08c4\0\u0908\0\u094c\0\u0990\0\u09d4\0\u0a18\0\u0a5c"+
    "\0\u0aa0\0\u0ae4\0\314\0\314\0\314\0\314\0\314\0\314"+
    "\0\u0b28\0\u0b6c\0\u0bb0\0\u0bf4\0\314\0\u03b8\0\314\0\u0c38"+
    "\0\u0c7c\0\314\0\u0cc0\0\u0d04\0\u0d48\0\u0d8c\0\314\0\u0dd0"+
    "\0\u0e14\0\u0e58\0\314\0\u0e9c\0\u0ee0\0\u0f24\0\u0f68\0\u0fac"+
    "\0\u0ff0\0\u1034\0\u1078\0\u10bc\0\u1100\0\u1144\0\u1188\0\u11cc"+
    "\0\u1210\0\u1254\0\u1298\0\u12dc\0\u1320\0\u1364\0\u13a8\0\u13ec"+
    "\0\u1430\0\u1474\0\u14b8\0\u14fc\0\u1540\0\u1584\0\u15c8\0\u160c"+
    "\0\u1650\0\u1694\0\u16d8\0\u171c\0\u1760\0\u17a4\0\u17e8\0\u182c"+
    "\0\u1870\0\u18b4\0\u18f8\0\u193c\0\u1980\0\u19c4\0\u1a08\0\u1a4c"+
    "\0\u1a90\0\u1ad4\0\u1b18\0\u1b5c\0\u01dc\0\u1ba0\0\u1be4\0\u01dc"+
    "\0\u1c28\0\u1c6c\0\u1cb0\0\u1cf4\0\u1d38\0\u1d7c\0\u1dc0\0\u1e04"+
    "\0\u1e48\0\u1e8c\0\u1ed0\0\u1f14\0\u1f58\0\u1f9c\0\u1fe0\0\u2024"+
    "\0\u2068\0\u20ac\0\u20f0\0\u2134\0\u2178\0\u21bc\0\u2200\0\314"+
    "\0\u2244\0\u2288\0\u22cc\0\u2310\0\u2354\0\u2398\0\u23dc\0\u2420"+
    "\0\u2464\0\u24a8\0\u24ec\0\314\0\314\0\u2530\0\u2574\0\u25b8"+
    "\0\u25fc\0\u25b8\0\u2640\0\u2684\0\u26c8\0\u270c\0\u2750\0\u2794"+
    "\0\u27d8\0\u281c\0\u2860\0\u28a4\0\u28e8\0\u292c\0\u2970\0\u29b4"+
    "\0\u29f8\0\u2a3c\0\u2a80\0\u2ac4\0\u2b08\0\u2b4c\0\u2b90\0\u2bd4"+
    "\0\u2c18\0\u2c5c\0\u2ca0\0\u2ce4\0\u2d28\0\u2d6c\0\u2db0\0\u2df4"+
    "\0\u2e38\0\u2e7c\0\u2ec0\0\u2f04\0\u2f48\0\u2f8c\0\u2fd0\0\u3014"+
    "\0\u3058\0\u309c\0\u30e0\0\u3124\0\u3168\0\u31ac\0\u31f0\0\u25b8"+
    "\0\u3234\0\u3278\0\u32bc\0\u3300\0\u3344\0\u21bc\0\314\0\u3388"+
    "\0\u33cc\0\u3410\0\u3454\0\u3498\0\u34dc\0\u3520\0\u3564\0\u35a8"+
    "\0\u35ec\0\u3630\0\u3674\0\u36b8\0\u36fc\0\u3740\0\u3784\0\u37c8"+
    "\0\u380c\0\u1a4c\0\u3850\0\u3894\0\u38d8\0\u391c\0\u3960\0\u39a4"+
    "\0\u39e8\0\u3a2c\0\u3a70\0\u3ab4\0\u3af8\0\u3b3c\0\u3b80\0\u3bc4"+
    "\0\u3c08\0\u3c4c\0\u3c90\0\u3cd4\0\u3d18\0\u3d5c\0\u3da0\0\u3de4"+
    "\0\u3e28\0\u3e6c\0\u3eb0\0\u3ef4\0\u3f38\0\u3f7c\0\u3fc0\0\u4004"+
    "\0\u4048\0\u408c\0\u40d0\0\u4114\0\u4158\0\u419c\0\u41e0\0\u4224"+
    "\0\u4268\0\u42ac\0\u42f0\0\u4334\0\u4378\0\u43bc\0\u4400\0\u4444"+
    "\0\u4488\0\u4048\0\u44cc\0\u4510\0\u4554\0\u4598\0\u45dc\0\u4620"+
    "\0\u4664\0\u46a8\0\u46ec\0\u11cc\0\u4730\0\u4774\0\u47b8\0\u47fc"+
    "\0\u4840\0\u4884\0\u48c8\0\u490c\0\u4950\0\u4994\0\u49d8\0\314"+
    "\0\u4a1c\0\u4a60\0\u4aa4\0\u4ae8\0\u4b2c\0\u4b70\0\u4bb4\0\u4bf8"+
    "\0\u4c3c\0\u4c80\0\u4cc4\0\u4d08\0\u4d4c\0\u4d90\0\u4dd4\0\u4e18"+
    "\0\u4e5c\0\u4ea0\0\u4ee4\0\u4f28\0\u4f6c\0\u4fb0\0\u4ff4\0\u5038"+
    "\0\u507c\0\u50c0\0\u5104\0\u5148\0\u518c\0\u51d0\0\u5214";

  private static int [] zzUnpackRowMap() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackRowMap(ZZ_ROWMAP_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackRowMap(String packed, int offset, int [] result) {
    int i = 0;  /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int high = packed.charAt(i++) << 16;
      result[j++] = high | packed.charAt(i++);
    }
    return j;
  }

  /**
   * The transition table of the DFA
   */
  private static final int [] ZZ_TRANS = zzUnpackTrans();

  private static final String ZZ_TRANS_PACKED_0 =
    "\1\4\1\5\1\4\1\6\1\7\1\10\1\11\1\12"+
    "\1\13\3\10\3\13\1\14\1\15\1\16\1\17\1\20"+
    "\1\21\1\4\1\22\1\23\1\24\1\25\1\26\1\27"+
    "\1\30\1\31\1\10\1\32\1\33\1\34\1\35\1\36"+
    "\1\37\1\40\1\41\1\42\1\43\1\44\1\45\1\46"+
    "\1\47\1\10\1\50\1\51\1\52\1\10\1\53\1\54"+
    "\1\55\1\56\1\57\1\60\1\61\1\62\1\17\1\63"+
    "\1\64\1\65\1\17\1\66\1\10\1\67\1\4\1\6"+
    "\1\70\1\71\1\72\20\70\1\73\1\74\1\75\56\70"+
    "\104\4\106\0\1\4\104\0\1\6\77\0\1\6\1\7"+
    "\1\76\1\77\101\7\5\0\13\10\1\0\1\10\4\0"+
    "\34\10\16\0\1\10\11\0\1\100\104\0\1\101\1\102"+
    "\1\103\1\104\1\0\1\105\1\106\1\105\1\107\1\110"+
    "\1\111\10\0\1\111\5\0\1\103\3\0\1\107\1\104"+
    "\45\0\2\13\1\103\2\0\3\13\1\107\1\110\1\111"+
    "\10\0\1\111\5\0\1\103\3\0\1\107\44\0\13\10"+
    "\1\0\1\10\4\0\1\112\33\10\16\0\1\10\12\0"+
    "\2\110\3\0\3\110\72\0\13\10\1\0\1\10\4\0"+
    "\12\10\1\113\21\10\16\0\1\10\101\0\1\65\30\0"+
    "\1\114\104\0\1\115\64\0\13\10\1\0\1\10\4\0"+
    "\1\10\1\116\1\10\1\117\3\10\1\120\10\10\1\121"+
    "\13\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\13\10\1\122\20\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\123\7\10\1\124\17\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\4\10\1\125"+
    "\1\10\1\126\3\10\1\127\1\130\1\10\1\131\16\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\1\10"+
    "\1\132\10\10\1\133\4\10\1\134\11\10\1\135\2\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\1\136"+
    "\3\10\1\137\6\10\1\140\20\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\5\10\1\141\7\10\1\142"+
    "\3\10\1\143\12\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\5\10\1\144\5\10\1\145\1\10\1\146"+
    "\16\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\147\11\10\1\150\1\151\6\10\1\152\2\10\1\153"+
    "\6\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\154\3\10\1\155\6\10\1\156\1\157\17\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\5\10\1\160"+
    "\1\10\1\161\1\10\1\162\6\10\1\163\13\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\1\10\1\164"+
    "\1\165\1\166\2\10\1\167\7\10\1\170\3\10\1\171"+
    "\11\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\10\1\172\32\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\5\10\1\173\4\10\1\174\1\175\1\176"+
    "\17\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\5\10\1\177\26\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\1\200\4\10\1\201\5\10\1\202\20\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\14\10"+
    "\1\203\17\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\1\204\13\10\1\155\17\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\205\5\10\1\206"+
    "\21\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\14\10\1\207\10\10\1\210\6\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\1\211\3\10\1\212\27\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\13\10"+
    "\1\213\20\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\5\10\1\214\26\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\1\215\33\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\14\10\1\152\17\10\16\0"+
    "\1\10\73\0\1\17\5\0\1\65\76\0\1\17\4\0"+
    "\1\65\100\0\1\17\1\65\1\0\1\65\101\0\1\17"+
    "\1\0\1\65\5\0\1\70\2\0\20\70\1\216\1\74"+
    "\1\0\56\70\2\0\1\72\101\0\1\216\2\0\20\216"+
    "\1\217\2\0\56\216\1\74\2\0\20\74\1\0\1\74"+
    "\1\0\56\74\1\220\2\0\4\220\1\221\4\220\2\221"+
    "\1\222\63\220\4\0\1\77\130\0\1\223\12\0\1\224"+
    "\50\0\1\101\1\102\1\103\2\0\1\105\1\106\1\105"+
    "\1\107\1\110\1\111\10\0\1\111\5\0\1\103\3\0"+
    "\1\107\46\0\2\102\3\0\3\102\1\107\1\110\1\111"+
    "\10\0\1\111\11\0\1\107\46\0\1\225\1\226\2\0"+
    "\5\226\1\0\1\226\4\0\1\226\1\0\1\226\1\0"+
    "\1\226\2\0\1\226\1\0\1\226\4\0\1\226\46\0"+
    "\1\227\1\102\1\103\2\0\3\227\1\107\1\110\1\111"+
    "\10\0\1\111\5\0\1\103\3\0\1\107\46\0\1\105"+
    "\1\102\1\103\2\0\3\105\1\107\1\110\1\111\10\0"+
    "\1\111\5\0\1\103\3\0\1\107\120\0\1\103\16\0"+
    "\1\103\12\0\2\110\3\0\3\110\1\107\1\0\1\111"+
    "\10\0\1\111\11\0\1\107\46\0\2\230\3\0\3\230"+
    "\3\0\1\231\66\0\13\10\1\0\1\10\4\0\12\10"+
    "\1\232\21\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\12\10\1\233\21\10\16\0\1\10\26\0\1\234"+
    "\104\0\1\235\64\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\170\31\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\3\10\1\236\30\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\165\30\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\20\10\1\237\13\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\6\10"+
    "\1\170\25\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\12\10\1\240\3\10\1\170\15\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\5\10\1\165\3\10"+
    "\1\162\17\10\1\241\2\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\6\10\1\242\3\10\1\243\21\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\1\244"+
    "\4\10\1\165\26\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\14\10\1\245\17\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\5\10\1\246\26\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\20\10\1\167"+
    "\1\10\1\165\11\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\15\10\1\247\16\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\250\10\10\1\243"+
    "\17\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\251\4\10\1\252\22\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\1\253\33\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\1\10\1\254\12\10"+
    "\1\255\7\10\1\256\7\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\2\10\1\257\3\10\1\260\3\10"+
    "\1\261\5\10\1\153\10\10\1\262\2\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\15\10\1\263\16\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\21\10"+
    "\1\170\12\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\20\10\1\264\13\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\20\10\1\265\13\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\4\10\1\266\27\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\13\10"+
    "\1\253\20\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\16\10\1\267\15\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\12\10\1\270\21\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\1\271\33\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\1\10\1\272"+
    "\2\10\1\273\15\10\1\274\11\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\20\10\1\165\13\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\5\10\1\165"+
    "\26\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\22\10\1\275\11\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\165\32\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\276\7\10\1\277"+
    "\22\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\162\30\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\2\10\1\165\31\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\33\10\1\300\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\6\10\1\165\25\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\155\27\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\6\10\1\301\11\10\1\302\13\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\3\10\1\303\10\10"+
    "\1\304\17\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\153\27\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\20\10\1\305\13\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\14\10\1\306\17\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\13\10"+
    "\1\307\20\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\13\10\1\310\20\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\5\10\1\170\26\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\1\10\1\311\10\10"+
    "\1\312\21\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\1\313\33\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\314\30\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\13\10\1\315\1\316\17\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\24\10"+
    "\1\165\7\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\317\27\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\17\10\2\165\13\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\6\10\1\320\25\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\13\10"+
    "\1\321\20\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\6\10\1\322\25\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\14\10\1\323\17\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\3\10\1\324\30\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\12\10"+
    "\1\152\4\10\1\165\14\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\1\10\1\265\4\10\1\325\25\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\15\10"+
    "\1\265\16\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\5\10\1\120\26\10\16\0\1\10\3\0\1\216"+
    "\2\0\21\216\2\0\57\216\2\0\20\216\1\326\2\0"+
    "\56\216\7\0\1\222\4\0\3\222\74\0\1\327\4\0"+
    "\3\327\113\0\1\330\125\0\1\331\42\0\1\225\1\226"+
    "\1\103\1\0\5\226\1\0\1\226\4\0\1\226\1\0"+
    "\1\226\1\0\1\226\2\0\1\226\1\0\1\226\1\103"+
    "\3\0\1\226\46\0\2\332\1\103\1\0\5\332\1\0"+
    "\1\332\4\0\1\332\1\0\1\332\1\0\1\332\2\0"+
    "\1\332\1\0\1\332\1\103\3\0\1\332\46\0\1\333"+
    "\1\102\1\103\2\0\3\333\1\107\1\110\1\111\10\0"+
    "\1\111\5\0\1\103\3\0\1\107\46\0\2\230\3\0"+
    "\3\230\1\107\24\0\1\107\46\0\2\230\3\0\3\230"+
    "\72\0\13\10\1\0\1\10\4\0\3\10\1\265\30\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\14\10"+
    "\1\334\17\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\4\10\1\335\27\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\12\10\1\336\21\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\1\337\33\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\22\10\1\340"+
    "\11\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\16\10\1\170\15\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\6\10\1\341\25\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\11\10\1\265\22\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\6\10\1\342"+
    "\25\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\22\10\1\343\11\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\170\27\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\11\10\1\344\22\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\4\10\1\345"+
    "\27\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\12\10\1\165\21\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\23\10\1\265\10\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\250\30\10\16\0"+
    "\1\10\10\0\1\10\1\346\11\10\1\0\1\10\4\0"+
    "\34\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\15\10\1\245\16\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\15\10\1\347\16\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\13\10\1\350\20\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\4\10\1\351"+
    "\27\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\10\1\352\32\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\12\10\1\265\21\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\165\27\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\1\353\33\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\16\10"+
    "\1\167\15\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\12\10\1\354\21\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\3\10\1\355\30\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\6\10\1\356\25\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\5\10"+
    "\1\245\26\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\20\10\1\357\13\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\7\10\1\360\24\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\23\10\1\165\10\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\1\361"+
    "\33\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\362\27\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\363\27\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\15\10\1\162\16\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\15\10\1\364"+
    "\16\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\10\1\365\32\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\13\10\1\335\20\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\11\10\1\366\22\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\22\10\1\170"+
    "\7\10\1\367\1\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\1\162\33\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\1\370\33\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\165\1\10\1\167"+
    "\25\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\10\1\254\32\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\170\30\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\20\10\1\371\13\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\1\10\1\122"+
    "\32\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\12\10\1\116\21\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\7\10\1\372\24\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\25\10\1\170\6\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\12\10\1\250"+
    "\21\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\337\24\10\1\165\6\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\27\10\1\373\4\10\16\0\1\10"+
    "\53\0\1\374\101\0\1\375\44\0\2\376\1\103\1\0"+
    "\5\376\1\0\1\376\4\0\1\376\1\0\1\376\1\0"+
    "\1\376\2\0\1\376\1\0\1\376\1\103\3\0\1\376"+
    "\46\0\1\377\1\102\1\103\2\0\3\377\1\107\1\110"+
    "\1\111\10\0\1\111\5\0\1\103\3\0\1\107\44\0"+
    "\13\10\1\0\1\10\4\0\20\10\1\u0100\13\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\5\10\1\122"+
    "\26\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\21\10\1\165\12\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\6\10\1\u0101\25\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\13\10\1\352\20\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\14\10\1\u0102"+
    "\17\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\352\27\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\u0103\27\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\16\10\1\u0104\15\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\20\10\1\122"+
    "\13\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\14\10\1\u0105\17\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\5\10\1\u0106\26\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\1\352\33\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\5\10\1\u0107\26\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\10\10"+
    "\1\170\23\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\1\u0108\33\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\u0109\30\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\14\10\1\u010a\17\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\12\10\1\u010b"+
    "\1\10\1\264\17\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\2\10\1\u010c\31\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\12\10\1\120\21\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\11\10\1\162"+
    "\22\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\5\10\1\155\26\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\7\10\1\u010d\24\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\3\10\1\u010e\30\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\13\10\1\u010f"+
    "\11\10\1\153\6\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\4\10\1\u0110\27\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\12\10\1\u0111\21\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\4\10\1\u0112"+
    "\27\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\1\u0113\33\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\22\10\1\u0114\11\10\16\0\1\10\35\0\1\u0115"+
    "\112\0\1\u0116\51\0\2\u0117\1\103\1\0\5\u0117\1\0"+
    "\1\u0117\4\0\1\u0117\1\0\1\u0117\1\0\1\u0117\2\0"+
    "\1\u0117\1\0\1\u0117\1\103\3\0\1\u0117\46\0\1\u0118"+
    "\1\102\1\103\2\0\3\u0118\1\107\1\110\1\111\10\0"+
    "\1\111\5\0\1\103\3\0\1\107\44\0\13\10\1\0"+
    "\1\10\4\0\3\10\1\u0119\30\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\6\10\1\153\25\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\11\10\1\u011a"+
    "\22\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\5\10\1\u011b\26\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\14\10\1\264\17\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\1\10\1\u011c\32\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\1\10\1\170"+
    "\32\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\342\30\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\7\10\1\264\24\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\22\10\1\u011d\11\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\1\10\1\u011e"+
    "\32\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\4\10\1\u011f\27\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\1\170\33\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\11\10\1\u0120\22\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\6\10\1\u0121\25\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\2\10"+
    "\1\265\31\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\1\10\1\u0122\32\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\12\10\1\141\21\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\5\10\1\u0123\26\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\12\10"+
    "\1\u0124\21\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\20\10\1\u0125\13\10\16\0\1\10\11\0\1\u0126"+
    "\130\0\1\u0127\57\0\2\u0128\1\103\1\0\5\u0128\1\0"+
    "\1\u0128\4\0\1\u0128\1\0\1\u0128\1\0\1\u0128\2\0"+
    "\1\u0128\1\0\1\u0128\1\103\3\0\1\u0128\46\0\1\u0129"+
    "\1\102\1\103\2\0\3\u0129\1\107\1\110\1\111\10\0"+
    "\1\111\5\0\1\103\3\0\1\107\44\0\13\10\1\0"+
    "\1\10\4\0\14\10\1\120\17\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\1\u012a\33\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\20\10\1\302\13\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\4\10"+
    "\1\u012b\27\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\15\10\1\250\16\10\16\0\1\10\10\0\13\10"+
    "\1\0\1\10\4\0\17\10\1\165\14\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\12\10\1\u012c\21\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\1\u012d"+
    "\33\10\16\0\1\10\10\0\13\10\1\0\1\10\4\0"+
    "\3\10\1\u012e\30\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\6\10\1\336\25\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\12\10\1\u012f\21\10\16\0"+
    "\1\10\11\0\1\u0130\131\0\1\u0115\56\0\2\u0131\1\103"+
    "\1\0\5\u0131\1\0\1\u0131\4\0\1\u0131\1\0\1\u0131"+
    "\1\0\1\u0131\2\0\1\u0131\1\0\1\u0131\1\103\3\0"+
    "\1\u0131\46\0\1\u0132\1\102\1\103\2\0\3\u0132\1\107"+
    "\1\110\1\111\10\0\1\111\5\0\1\103\3\0\1\107"+
    "\44\0\13\10\1\0\1\10\4\0\6\10\1\265\25\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\6\10"+
    "\1\u0133\25\10\16\0\1\10\10\0\13\10\1\0\1\10"+
    "\4\0\1\u0134\33\10\16\0\1\10\10\0\13\10\1\0"+
    "\1\10\4\0\1\10\1\245\32\10\16\0\1\10\10\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\162\27\10\16\0"+
    "\1\10\10\0\13\10\1\0\1\10\4\0\4\10\1\u0135"+
    "\27\10\16\0\1\10\12\0\2\u0136\1\103\1\0\5\u0136"+
    "\1\0\1\u0136\4\0\1\u0136\1\0\1\u0136\1\0\1\u0136"+
    "\2\0\1\u0136\1\0\1\u0136\1\103\3\0\1\u0136\46\0"+
    "\1\u0137\1\102\1\103\2\0\3\u0137\1\107\1\110\1\111"+
    "\10\0\1\111\5\0\1\103\3\0\1\107\44\0\13\10"+
    "\1\0\1\10\4\0\25\10\1\340\6\10\16\0\1\10"+
    "\10\0\13\10\1\0\1\10\4\0\3\10\1\120\30\10"+
    "\16\0\1\10\10\0\13\10\1\0\1\10\4\0\22\10"+
    "\1\u0138\11\10\16\0\1\10\12\0\2\u0139\1\103\1\0"+
    "\5\u0139\1\0\1\u0139\4\0\1\u0139\1\0\1\u0139\1\0"+
    "\1\u0139\2\0\1\u0139\1\0\1\u0139\1\103\3\0\1\u0139"+
    "\46\0\1\u013a\1\102\1\103\2\0\3\u013a\1\107\1\110"+
    "\1\111\10\0\1\111\5\0\1\103\3\0\1\107\44\0"+
    "\13\10\1\0\1\10\4\0\4\10\1\u013b\27\10\16\0"+
    "\1\10\12\0\2\u013c\1\103\1\0\5\u013c\1\0\1\u013c"+
    "\4\0\1\u013c\1\0\1\u013c\1\0\1\u013c\2\0\1\u013c"+
    "\1\0\1\u013c\1\103\3\0\1\u013c\46\0\1\u013d\1\102"+
    "\1\103\2\0\3\u013d\1\107\1\110\1\111\10\0\1\111"+
    "\5\0\1\103\3\0\1\107\44\0\13\10\1\0\1\10"+
    "\4\0\1\10\1\246\32\10\16\0\1\10\12\0\2\u013e"+
    "\1\103\1\0\5\u013e\1\0\1\u013e\4\0\1\u013e\1\0"+
    "\1\u013e\1\0\1\u013e\2\0\1\u013e\1\0\1\u013e\1\103"+
    "\3\0\1\u013e\46\0\1\u013f\1\102\1\103\2\0\3\u013f"+
    "\1\107\1\110\1\111\10\0\1\111\5\0\1\103\3\0"+
    "\1\107\46\0\2\u0140\1\103\1\0\5\u0140\1\0\1\u0140"+
    "\4\0\1\u0140\1\0\1\u0140\1\0\1\u0140\2\0\1\u0140"+
    "\1\0\1\u0140\1\103\3\0\1\u0140\46\0\1\u0141\1\102"+
    "\1\103\2\0\3\u0141\1\107\1\110\1\111\10\0\1\111"+
    "\5\0\1\103\3\0\1\107\46\0\2\u0142\1\103\1\0"+
    "\5\u0142\1\0\1\u0142\4\0\1\u0142\1\0\1\u0142\1\0"+
    "\1\u0142\2\0\1\u0142\1\0\1\u0142\1\103\3\0\1\u0142"+
    "\46\0\1\u0143\1\102\1\103\2\0\3\u0143\1\107\1\110"+
    "\1\111\10\0\1\111\5\0\1\103\3\0\1\107\46\0"+
    "\2\u0144\1\103\1\0\5\u0144\1\0\1\u0144\4\0\1\u0144"+
    "\1\0\1\u0144\1\0\1\u0144\2\0\1\u0144\1\0\1\u0144"+
    "\1\103\3\0\1\u0144\46\0\1\u0145\1\102\1\103\2\0"+
    "\3\u0145\1\107\1\110\1\111\10\0\1\111\5\0\1\103"+
    "\3\0\1\107\46\0\2\u0146\1\103\1\0\5\u0146\1\0"+
    "\1\u0146\4\0\1\u0146\1\0\1\u0146\1\0\1\u0146\2\0"+
    "\1\u0146\1\0\1\u0146\1\103\3\0\1\u0146\46\0\1\u0147"+
    "\1\102\1\103\2\0\3\u0147\1\107\1\110\1\111\10\0"+
    "\1\111\5\0\1\103\3\0\1\107\46\0\2\u0148\1\103"+
    "\1\0\5\u0148\1\0\1\u0148\4\0\1\u0148\1\0\1\u0148"+
    "\1\0\1\u0148\2\0\1\u0148\1\0\1\u0148\1\103\3\0"+
    "\1\u0148\46\0\1\u0149\1\102\1\103\2\0\3\u0149\1\107"+
    "\1\110\1\111\10\0\1\111\5\0\1\103\3\0\1\107"+
    "\46\0\2\u014a\1\103\1\0\5\u014a\1\0\1\u014a\4\0"+
    "\1\u014a\1\0\1\u014a\1\0\1\u014a\2\0\1\u014a\1\0"+
    "\1\u014a\1\103\3\0\1\u014a\46\0\1\u014b\1\102\1\103"+
    "\2\0\3\u014b\1\107\1\110\1\111\10\0\1\111\5\0"+
    "\1\103\3\0\1\107\50\0\1\103\26\0\1\103\52\0"+
    "\1\u014c\1\102\1\103\2\0\3\u014c\1\107\1\110\1\111"+
    "\10\0\1\111\5\0\1\103\3\0\1\107\46\0\1\u014d"+
    "\1\102\1\103\2\0\3\u014d\1\107\1\110\1\111\10\0"+
    "\1\111\5\0\1\103\3\0\1\107\46\0\1\u014e\1\102"+
    "\1\103\2\0\3\u014e\1\107\1\110\1\111\10\0\1\111"+
    "\5\0\1\103\3\0\1\107\46\0\1\u014f\1\102\1\103"+
    "\2\0\3\u014f\1\107\1\110\1\111\10\0\1\111\5\0"+
    "\1\103\3\0\1\107\46\0\2\102\1\103\2\0\3\102"+
    "\1\107\1\110\1\111\10\0\1\111\5\0\1\103\3\0"+
    "\1\107\37\0";

  private static int [] zzUnpackTrans() {
    int [] result = new int[21080];
    int offset = 0;
    offset = zzUnpackTrans(ZZ_TRANS_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackTrans(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      value--;
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }


  /* error codes */
  private static final int ZZ_UNKNOWN_ERROR = 0;
  private static final int ZZ_NO_MATCH = 1;
  private static final int ZZ_PUSHBACK_2BIG = 2;

  /* error messages for the codes above */
  private static final String ZZ_ERROR_MSG[] = {
    "Unknown internal scanner error",
    "Error: could not match input",
    "Error: pushback value was too large"
  };

  /**
   * ZZ_ATTRIBUTE[aState] contains the attributes of state <code>aState</code>
   */
  private static final int [] ZZ_ATTRIBUTE = zzUnpackAttribute();

  private static final String ZZ_ATTRIBUTE_PACKED_0 =
    "\3\0\1\11\46\1\6\11\4\1\1\11\1\1\1\11"+
    "\2\1\1\11\4\1\1\11\1\0\2\1\1\11\1\0"+
    "\4\1\1\0\2\1\2\0\102\1\1\11\2\1\2\0"+
    "\4\1\1\0\2\1\2\11\71\1\1\11\2\0\42\1"+
    "\2\0\27\1\2\0\17\1\2\0\10\1\1\11\13\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\1\1"+
    "\1\0\1\1\1\0\1\1\1\0\1\1\1\0\5\1";

  private static int [] zzUnpackAttribute() {
    int [] result = new int[335];
    int offset = 0;
    offset = zzUnpackAttribute(ZZ_ATTRIBUTE_PACKED_0, offset, result);
    return result;
  }

  private static int zzUnpackAttribute(String packed, int offset, int [] result) {
    int i = 0;       /* index in packed string  */
    int j = offset;  /* index in unpacked array */
    int l = packed.length();
    while (i < l) {
      int count = packed.charAt(i++);
      int value = packed.charAt(i++);
      do result[j++] = value; while (--count > 0);
    }
    return j;
  }

  /** the input device */
  private java.io.Reader zzReader;

  /** the current state of the DFA */
  private int zzState;

  /** the current lexical state */
  private int zzLexicalState = YYINITIAL;

  /** this buffer contains the current text to be matched and is
      the source of the yytext() string */
  private char zzBuffer[] = new char[ZZ_BUFFERSIZE];

  /** the textposition at the last accepting state */
  private int zzMarkedPos;

  /** the current text position in the buffer */
  private int zzCurrentPos;

  /** startRead marks the beginning of the yytext() string in the buffer */
  private int zzStartRead;

  /** endRead marks the last character in the buffer, that has been read
      from input */
  private int zzEndRead;

  /** number of newlines encountered up to the start of the matched text */
  private int yyline;

  /** the number of characters up to the start of the matched text */
  private int yychar;

  /**
   * the number of characters from the last newline up to the start of the
   * matched text
   */
  private int yycolumn;

  /**
   * zzAtBOL == true <=> the scanner is currently at the beginning of a line
   */
  private boolean zzAtBOL = true;

  /** zzAtEOF == true <=> the scanner is at the EOF */
  private boolean zzAtEOF;

  /** denotes if the user-EOF-code has already been executed */
  private boolean zzEOFDone;

  /**
   * The number of occupied positions in zzBuffer beyond zzEndRead.
   * When a lead/high surrogate has been read from the input stream
   * into the final zzBuffer position, this will have a value of 1;
   * otherwise, it will have a value of 0.
   */
  private int zzFinalHighSurrogate = 0;

  /* user code: */

    @Override
    public int yychar() {
        return yychar;
    }

    private static final byte PARAN     = 1;
    private static final byte BRACKET   = 2;
    private static final byte CURLY     = 3;

//    private static final byte TokenType.OPERATOR = 4; // 0x000000
//    private static final byte TokenType.DELIMITER = 5; // 0x000000
//    private static final byte TokenType.KEYWORD = 6; // 0x3333ee
//    private static final byte TokenType.KEYWORD2 = 7; // 0x3333ee
//    private static final byte TokenType.TYPE = 8; // 0x000000
//    private static final byte TokenType.TYPE2 = 9; // 0x000000
//    private static final byte TokenType.TYPE3 = 10; // 0x000000
//    private static final byte TokenType.STRING = 11; // 0xcc6600
//    private static final byte TokenType.STRING2 = 12; // 0xcc6600
//    private static final byte TokenType.NUMBER = 13; // 0x999933
//    private static final byte TokenType.REGEX = 14; // 0xcc6600
//    private static final byte TokenType.IDENTIFIER = 15; // 0x000000
//    private static final byte TokenType.COMMENT = 16; // 0x339933
//    private static final byte TokenType.COMMENT2 = 17; // 0x339933
//    private static final byte TokenType.DEFAULT = 18; // 0x000000
//    private static final byte TokenType.WARNING = 19; // 0xCC0000
//    private static final byte TokenType.ERROR = 20; // 0xCC0000

    public int getStyleCount() {
        return 20;
    }

    public byte getStartState() {
    	return YYINITIAL+1;
    }

    public byte getCurrentState() {
    	return (byte) (yystate()+1);
    }

    public void setState(byte newState) {
    	yybegin(newState-1);
    }

    public byte getNextToken() throws IOException { // USUALLY public byte getNextToken()
        Token token = yylex();
    	return (token != null) ? token.getTokenType().getValue() : (byte) 0;
    }

    public int getTokenLength() {
    	return yylength();
    }

    public void setReader(Reader r) {
    	this.zzReader = r;
    }

    public PythonHighlighter() {}


  /**
   * Creates a new scanner
   *
   * @param   in  the java.io.Reader to read input from.
   */
  public PythonHighlighter(java.io.Reader in) {
    this.zzReader = in;
  }


  /**
   * Unpacks the compressed character translation table.
   *
   * @param packed   the packed character translation table
   * @return         the unpacked character translation table
   */
  private static char [] zzUnpackCMap(String packed) {
    char [] map = new char[0x110000];
    int i = 0;  /* index in packed string  */
    int j = 0;  /* index in unpacked array */
    while (i < 216) {
      int  count = packed.charAt(i++);
      char value = packed.charAt(i++);
      do map[j++] = value; while (--count > 0);
    }
    return map;
  }


  /**
   * Refills the input buffer.
   *
   * @return      <code>false</code>, iff there was new input.
   *
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  private boolean zzRefill() throws java.io.IOException {

    /* first: make room (if you can) */
    if (zzStartRead > 0) {
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
      System.arraycopy(zzBuffer, zzStartRead,
                       zzBuffer, 0,
                       zzEndRead-zzStartRead);

      /* translate stored positions */
      zzEndRead-= zzStartRead;
      zzCurrentPos-= zzStartRead;
      zzMarkedPos-= zzStartRead;
      zzStartRead = 0;
    }

    /* is the buffer big enough? */
    if (zzCurrentPos >= zzBuffer.length - zzFinalHighSurrogate) {
      /* if not: blow it up */
      char newBuffer[] = new char[zzBuffer.length*2];
      System.arraycopy(zzBuffer, 0, newBuffer, 0, zzBuffer.length);
      zzBuffer = newBuffer;
      zzEndRead += zzFinalHighSurrogate;
      zzFinalHighSurrogate = 0;
    }

    /* fill the buffer with new input */
    int requested = zzBuffer.length - zzEndRead;
    int numRead = zzReader.read(zzBuffer, zzEndRead, requested);

    /* not supposed to occur according to specification of java.io.Reader */
    if (numRead == 0) {
      throw new java.io.IOException("Reader returned 0 characters. See JFlex examples for workaround.");
    }
    if (numRead > 0) {
      zzEndRead += numRead;
      /* If numRead == requested, we might have requested to few chars to
         encode a full Unicode character. We assume that a Reader would
         otherwise never return half characters. */
      if (numRead == requested) {
        if (Character.isHighSurrogate(zzBuffer[zzEndRead - 1])) {
          --zzEndRead;
          zzFinalHighSurrogate = 1;
        }
      }
      /* potentially more input available */
      return false;
    }

    /* numRead < 0 ==> end of stream */
    return true;
  }


  /**
   * Closes the input stream.
   */
  public final void yyclose() throws java.io.IOException {
    zzAtEOF = true;            /* indicate end of file */
    zzEndRead = zzStartRead;  /* invalidate buffer    */

    if (zzReader != null)
      zzReader.close();
  }


  /**
   * Resets the scanner to read from a new input stream.
   * Does not close the old reader.
   *
   * All internal variables are reset, the old input stream
   * <b>cannot</b> be reused (internal buffer is discarded and lost).
   * Lexical state is set to <tt>ZZ_INITIAL</tt>.
   *
   * Internal scan buffer is resized down to its initial length, if it has grown.
   *
   * @param reader   the new input stream
   */
  public final void yyreset(java.io.Reader reader) {
    zzReader = reader;
    zzAtBOL  = true;
    zzAtEOF  = false;
    zzEOFDone = false;
    zzEndRead = zzStartRead = 0;
    zzCurrentPos = zzMarkedPos = 0;
    zzFinalHighSurrogate = 0;
    yyline = yychar = yycolumn = 0;
    zzLexicalState = YYINITIAL;
    if (zzBuffer.length > ZZ_BUFFERSIZE)
      zzBuffer = new char[ZZ_BUFFERSIZE];
  }


  /**
   * Returns the current lexical state.
   */
  public final int yystate() {
    return zzLexicalState;
  }


  /**
   * Enters a new lexical state
   *
   * @param newState the new lexical state
   */
  public final void yybegin(int newState) {
    zzLexicalState = newState;
  }


  /**
   * Returns the text matched by the current regular expression.
   */
  public final String yytext() {
    return new String( zzBuffer, zzStartRead, zzMarkedPos-zzStartRead );
  }


  /**
   * Returns the character at position <tt>pos</tt> from the
   * matched text.
   *
   * It is equivalent to yytext().charAt(pos), but faster
   *
   * @param pos the position of the character to fetch.
   *            A value from 0 to yylength()-1.
   *
   * @return the character at position pos
   */
  public final char yycharat(int pos) {
    return zzBuffer[zzStartRead+pos];
  }


  /**
   * Returns the length of the matched text region.
   */
  public final int yylength() {
    return zzMarkedPos-zzStartRead;
  }


  /**
   * Reports an error that occured while scanning.
   *
   * In a wellformed scanner (no or only correct usage of
   * yypushback(int) and a match-all fallback rule) this method
   * will only be called with things that "Can't Possibly Happen".
   * If this method is called, something is seriously wrong
   * (e.g. a JFlex bug producing a faulty scanner etc.).
   *
   * Usual syntax/scanner level error handling should be done
   * in error fallback rules.
   *
   * @param   errorCode  the code of the errormessage to display
   */
  private void zzScanError(int errorCode) {
    String message;
    try {
      message = ZZ_ERROR_MSG[errorCode];
    }
    catch (ArrayIndexOutOfBoundsException e) {
      message = ZZ_ERROR_MSG[ZZ_UNKNOWN_ERROR];
    }

    throw new Error(message);
  }


  /**
   * Pushes the specified amount of characters back into the input stream.
   *
   * They will be read again by then next call of the scanning method
   *
   * @param number  the number of characters to be read again.
   *                This number must not be greater than yylength()!
   */
  public void yypushback(int number)  {
    if ( number > yylength() )
      zzScanError(ZZ_PUSHBACK_2BIG);

    zzMarkedPos -= number;
  }


  /**
   * Resumes scanning until the next regular expression is matched,
   * the end of input is encountered or an I/O-Error occurs.
   *
   * @return      the next token
   * @exception   java.io.IOException  if any I/O-Error occurs
   */
  public Token yylex() throws java.io.IOException {
    int zzInput;
    int zzAction;

    // cached fields:
    int zzCurrentPosL;
    int zzMarkedPosL;
    int zzEndReadL = zzEndRead;
    char [] zzBufferL = zzBuffer;
    char [] zzCMapL = ZZ_CMAP;

    int [] zzTransL = ZZ_TRANS;
    int [] zzRowMapL = ZZ_ROWMAP;
    int [] zzAttrL = ZZ_ATTRIBUTE;

    while (true) {
      zzMarkedPosL = zzMarkedPos;

      yychar+= zzMarkedPosL-zzStartRead;

      zzAction = -1;

      zzCurrentPosL = zzCurrentPos = zzStartRead = zzMarkedPosL;

      zzState = ZZ_LEXSTATE[zzLexicalState];

      // set up zzAction for empty match case:
      int zzAttributes = zzAttrL[zzState];
      if ( (zzAttributes & 1) == 1 ) {
        zzAction = zzState;
      }


      zzForAction: {
        while (true) {

          if (zzCurrentPosL < zzEndReadL) {
            zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
            zzCurrentPosL += Character.charCount(zzInput);
          }
          else if (zzAtEOF) {
            zzInput = YYEOF;
            break zzForAction;
          }
          else {
            // store back cached positions
            zzCurrentPos  = zzCurrentPosL;
            zzMarkedPos   = zzMarkedPosL;
            boolean eof = zzRefill();
            // get translated positions and possibly new buffer
            zzCurrentPosL  = zzCurrentPos;
            zzMarkedPosL   = zzMarkedPos;
            zzBufferL      = zzBuffer;
            zzEndReadL     = zzEndRead;
            if (eof) {
              zzInput = YYEOF;
              break zzForAction;
            }
            else {
              zzInput = Character.codePointAt(zzBufferL, zzCurrentPosL, zzEndReadL);
              zzCurrentPosL += Character.charCount(zzInput);
            }
          }
          int zzNext = zzTransL[ zzRowMapL[zzState] + zzCMapL[zzInput] ];
          if (zzNext == -1) break zzForAction;
          zzState = zzNext;

          zzAttributes = zzAttrL[zzState];
          if ( (zzAttributes & 1) == 1 ) {
            zzAction = zzState;
            zzMarkedPosL = zzCurrentPosL;
            if ( (zzAttributes & 8) == 8 ) break zzForAction;
          }

        }
      }

      // store back cached position
      zzMarkedPos = zzMarkedPosL;

      if (zzInput == YYEOF && zzStartRead == zzCurrentPos) {
        zzAtEOF = true;
              {
                return null;
              }
      }
      else {
        switch (zzAction < 0 ? zzAction : ZZ_ACTION[zzAction]) {
          case 1:
            {
            }
          case 24: break;
          case 2:
            { return token(TokenType.COMMENT);
            }
          case 25: break;
          case 3:
            { return token(TokenType.IDENTIFIER);
            }
          case 26: break;
          case 4:
            { return token(TokenType.NUMBER);
            }
          case 27: break;
          case 5:
            { return token(TokenType.OPERATOR);
            }
          case 28: break;
          case 6:
            { yybegin(STRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
            }
          case 29: break;
          case 7:
            { yybegin(SQSTRING);
                                    tokenStart = yychar;
                                    tokenLength = 1;
            }
          case 30: break;
          case 8:
            { return token(TokenType.OPERATOR,  PARAN);
            }
          case 31: break;
          case 9:
            { return token(TokenType.OPERATOR, -PARAN);
            }
          case 32: break;
          case 10:
            { return token(TokenType.OPERATOR,  CURLY);
            }
          case 33: break;
          case 11:
            { return token(TokenType.OPERATOR, -CURLY);
            }
          case 34: break;
          case 12:
            { return token(TokenType.OPERATOR,  BRACKET);
            }
          case 35: break;
          case 13:
            { return token(TokenType.OPERATOR, -BRACKET);
            }
          case 36: break;
          case 14:
            { return token(TokenType.ERROR);
            }
          case 37: break;
          case 15:
            { tokenLength += yylength();
            }
          case 38: break;
          case 16:
            { yybegin(YYINITIAL);
            }
          case 39: break;
          case 17:
            { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 1);
            }
          case 40: break;
          case 18:
            { return token(TokenType.KEYWORD);
            }
          case 41: break;
          case 19:
            { return token(TokenType.TYPE);
            }
          case 42: break;
          case 20:
            { tokenLength += 2;
            }
          case 43: break;
          case 21:
            { yybegin(ML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
            }
          case 44: break;
          case 22:
            { yybegin(SQML_STRING);
                                    tokenStart = yychar;
                                    tokenLength = 3;
            }
          case 45: break;
          case 23:
            { yybegin(YYINITIAL);
                                     // length also includes the trailing quote
                                     return token(TokenType.STRING, tokenStart, tokenLength + 3);
            }
          case 46: break;
          default:
            zzScanError(ZZ_NO_MATCH);
        }
      }
    }
  }


}
