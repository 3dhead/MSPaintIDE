package com.uddernetworks.mspaint.code.languages;

import org.antlr.v4.runtime.CharStream;
import org.antlr.v4.runtime.Lexer;
import org.antlr.v4.runtime.Parser;
import org.antlr.v4.runtime.TokenStream;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

import java.awt.*;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.Optional;

public abstract class HighlightData {

    private static Logger LOGGER = LoggerFactory.getLogger(HighlightData.class);

    protected Map<List<String>, Integer> tokenMap = new HashMap<>();
    private Language language;

    public HighlightData(Language language) {
        this.language = language;
    }

    /**
     * Gets the {@link Lexer} generated by the ANTLR .g4 file for the current language.
     *
     * @param inputStream The {@link CharStream} input
     * @return The {@link Lexer}
     */
    abstract public Lexer getLexer(CharStream inputStream);

    /**
     * Gets the {@link Parser} generated by the ANTLR .g4 file for the current language.
     *
     * @param input The {@link TokenStream} input
     * @return The {@link Parser}
     */
    abstract public Parser getParser(TokenStream input);

    public Optional<Color> getColor(String tokenName) {
        var optional = this.tokenMap.entrySet().stream().filter(entry -> entry.getKey().contains(tokenName)).findFirst().map(Map.Entry::getValue).map(Color::new);
        if (!optional.isPresent()) LOGGER.error("No color found for token {} for {}", tokenName, this.language.getName());
        return optional;
    }

}
